import os
import signal

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core import database
from core.config import dp, bot
from core.filters import SelectAssistant
from core.states import EditAssistantStates
from core.utils import restart_working_assistant, check_token, check_assistant_status


@dp.callback_query(F.data == 'assistant_settings')
async def assistant_settings(call: types.CallbackQuery, state: FSMContext):
    assistant = await database.get_assistant((await state.get_data())['assistant_id'])
    await state.set_state()

    text = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    keyboard = InlineKeyboardBuilder()
    if 'gpt' in assistant['model'].lower() and assistant['model'] != 'gpt-4':
        system = '\n\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RAG —Å–∏—Å—Ç–µ–º–∞ ' + ('–±–æ—Ç–∞' if assistant['own_search'] else '–æ—Ç OpenAI (10‚ÇΩ/–ì–±)')
        text += f'{system}\n\n<b>RAG</b> - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–∑ "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"'
        change_system = 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG –±–æ—Ç–∞' if not assistant['own_search'] else 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG –æ—Ç OpenAI'
        keyboard.row(types.InlineKeyboardButton(text=change_system, callback_data='change_RAG_system'))
    keyboard.row(types.InlineKeyboardButton(text='üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω', callback_data='edit_token'))
    keyboard.row(types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', callback_data='delete_assistant'))
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=SelectAssistant(id=assistant['id']).pack()))

    await call.message.edit_text(text, reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == 'change_RAG_system')
async def change_RAG_system(call: types.CallbackQuery, state: FSMContext):
    assistant = await database.get_assistant((await state.get_data())['assistant_id'])
    await database.update_assistant(assistant['id'], {'own_search': not assistant['own_search']})
    await restart_working_assistant(assistant['id'])
    await assistant_settings(call, state)


@dp.callback_query(F.data == 'edit_token')
async def edit_token(data, state: FSMContext):
    message: types.Message = data.message if isinstance(data, types.CallbackQuery) else data
    assistant = await database.get_assistant((await state.get_data())['assistant_id'])
    state_data = await state.get_data()
    await state.set_state(EditAssistantStates.edit_token)
    await state.update_data(message_id=state_data.get('message_id', message.message_id))

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='assistant_settings'))

    await bot.edit_message_text(f'–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: \n\n<code>{assistant["token"]}</code>\n\n'
                                f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç', chat_id=message.chat.id,
                                message_id=state_data.get('message_id', message.message_id),
                                reply_markup=keyboard.as_markup())


@dp.message(F.text[0] != '/', EditAssistantStates.edit_token)
async def edit_token_commit(message: types.Message, state: FSMContext):
    info = await check_token(message)
    if not info:
        return 0

    await state.set_state()
    state_data = await state.get_data()

    await database.update_assistant(state_data['assistant_id'], {'token': message.text, 'username': info.username})

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='üèö –ú–µ–Ω—é', callback_data='start'))

    await restart_working_assistant(state_data['assistant_id'])
    await message.delete()
    await bot.edit_message_text(f'‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. \n\n'
                                f'–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: @{info.username}', chat_id=message.chat.id,
                                message_id=state_data.get('message_id', message.message_id),
                                reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == 'delete_assistant')
async def delete_assistant_confirm(call: types.CallbackQuery, state: FSMContext):
    assistant = await database.get_assistant((await state.get_data())['assistant_id'])

    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–î–∞, —É–≤–µ—Ä–µ–Ω', callback_data='delete_assistant_confirm'))
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='assistant_settings'))

    await call.message.edit_text(f'‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ <b>{assistant["name"]}</b>?\n\n'
                                 f'–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å',
                                 reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == 'delete_assistant_confirm')
async def delete_assistant(call: types.CallbackQuery, state: FSMContext):
    assistant = await database.get_assistant((await state.get_data())['assistant_id'])
    if await check_assistant_status(assistant):
        os.kill(assistant['pid'], signal.SIGTERM)

    await database.delete_assistant((await state.get_data())['assistant_id'])

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='üèö –ú–µ–Ω—é', callback_data='start'))

    await call.message.edit_text(f'‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω', reply_markup=keyboard.as_markup())
